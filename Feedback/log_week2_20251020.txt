======================================================================
AUTOMATED FEEDBACK LOG
======================================================================

HOW TO READ THIS FEEDBACK:
--------------------------
1. This log contains detailed feedback on your code execution
2. Each script is tested and results are shown with output and errors
3. IMPORTANT: Read all the way to the END for a summary and debugging guidance
4. The summary at the end will help you understand and fix any issues
5. Scripts are run in a headless environment (no GUI applications)

======================================================================

Starting testing for Ekadh Ranganathan

Processing week 2

Your current Git repo size is about 3.45 MiB on disk

Found directories: .git, week1, week2, Feedback, week3
Found files: .gitignore, README.md

Processing week 2: week2

Found 22 code files to test.

Note: Expected file checking not performed (no FileList provided).
Expected file checking will only be performed during final assessment.

======================================================================
Script: lc2.py

Contents:

**********
# Average UK Rainfall (mm) for 1910 by month
# http://www.metoffice.gov.uk/climate/uk/datasets
rainfall = (('JAN',111.4),
            ('FEB',126.1),
            ('MAR', 49.9),
            ('APR', 95.3),
            ('MAY', 71.8),
            ('JUN', 70.2),
            ('JUL', 97.1),
            ('AUG',140.2),
            ('SEP', 27.0),
            ('OCT', 89.4),
            ('NOV',128.4),
            ('DEC',142.2),
           )

# (1) Use a list comprehension to create a list of month,rainfall tuples where
# the amount of rain was greater than 100 mm.

hundred_mm = [row for row in rainfall if row[1] > 100]

print("Months and rainfall amounts where rainfall has exceeded 100mm in the UK in 1910: ", hundred_mm)
 
# (2) Use a list comprehension to create a list of just month names where the
# amount of rain was less than 50 mm. 

fifty_mm = [row[0] for row in rainfall if row[1] < 50]

print("Months that received less than 50mm of rainfall in the UK in 1910: ", fifty_mm)

# (3) Now do (1) and (2) using conventional loops (you can choose to do 
# this before 1 and 2 !). 

## (1) using conventional for loops

hundred_mm = []
for row in rainfall:
    if row[1] > 100:
        hundred_mm.append(row)

print("Months and rainfall amounts where rainfall has exceeded 100mm in the UK in 1910: ", hundred_mm)

## (2) using conventional for loops

fifty_mm = []
for row in rainfall:
    if row[1] < 50:
        fifty_mm.append(row[0])

print("Months that received less than 50mm of rainfall in the UK in 1910: ", fifty_mm)

# A good example output is:
#
# Step #1:
# Months and rainfall values when the amount of rain was greater than 100mm:
# [('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
# ... etc.


**********

Output (first 500 chars):

**********
Months and rainfall amounts where rainfall has exceeded 100mm in the UK in 1910:  [('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
Months that received less than 50mm of rainfall in the UK in 1910:  ['MAR', 'SEP']
Months and rainfall amounts where rainfall has exceeded 100mm in the UK in 1910:  [('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
Months that received less than 50mm of rainfall in the UK in 1910:  ['MAR', 'SEP']

**********
No errors.
======================================================================
Script: test_oaks_debugme.py

Contents:

**********
import csv
import sys
import doctest

#Define function
def is_an_oak(name):
    """Find whether a species is an oak or not
    >>> is_an_oak('Fagus sylvatica')
    False

    >>> is_an_oak('Quercuss')
    True

    >>> is_an_oak('quercuss')
    True

    >>> is_an_oak('quercs')
    True

    >>> is_an_oak('quercus')
    True

    >>> is_an_oak('Quercs')
    True

    >>> is_an_oak('Quercs rober')
    True

    """
    return 'querc' in name.lower()

def main(argv): 
    f = open('../data/TestOaksData.csv','r')
    g = open('../data/JustOaksData.csv','w')
    taxa = csv.reader(f)
    csvwrite = csv.writer(g)
    oaks = set()
    for row in taxa:
        print(row)
        print ("The genus is: ") 
        print(row[0] + '\n')
        if is_an_oak(row[0]):
            print('FOUND AN OAK!\n')
            csvwrite.writerow([row[0], row[1]])    

    return 0
    
if (__name__ == "__main__"):
    status = main(sys.argv)

doctest.testmod()
**********

Output (first 500 chars):

**********
['Genus', ' species']
The genus is: 
Genus

['Quercus', ' robur']
The genus is: 
Quercus

FOUND AN OAK!

['Fraxinus', ' excelsior']
The genus is: 
Fraxinus

['Pinus', ' sylvestris']
The genus is: 
Pinus

['Quercus', ' cerris']
The genus is: 
Quercus

FOUND AN OAK!

['Quercus', ' petraea']
The genus is: 
Quercus

FOUND AN OAK!


**********
No errors.
======================================================================
Script: oaks.py

Contents:

**********
## Script to find only oak trees from a list of tree species using different methods

taxa = [ 'Quercus robur',
         'Fraxinus excelsior',
         'Pinus sylvestris',
         'Quercus cerris',
         'Quercus petraea',
       ]

## Using FOR loops ##
def is_an_oak(name):
    return name.lower().startswith('quercus ')

oak_loops = set()
for species in taxa:
    if is_an_oak(species):
        oak_loops.add(species)

print(oak_loops)


## Using LIST COMPREHENSIONS ##
oaks_lc = set([species for species in taxa if is_an_oak(species)])
print(oaks_lc)

## Setting UPPERCASE with FOR loops ##
oak_loops = set()
for species in taxa:
    if is_an_oak(species):
        oak_loops.add(species.upper())

print(oak_loops)

## Setting UPPERCASE using LIST COMPRE ##

oak_lc = set([species.upper() for species in taxa if is_an_oak(species)])
print(oaks_lc)






**********

Output (first 500 chars):

**********
{'Quercus robur', 'Quercus petraea', 'Quercus cerris'}
{'Quercus robur', 'Quercus petraea', 'Quercus cerris'}
{'QUERCUS ROBUR', 'QUERCUS PETRAEA', 'QUERCUS CERRIS'}
{'Quercus robur', 'Quercus petraea', 'Quercus cerris'}

**********
No errors.
======================================================================
Script: dictionary.py

Contents:

**********
taxa = [ ('Myotis lucifugus','Chiroptera'),
         ('Gerbillus henleyi','Rodentia',),
         ('Peromyscus crinitus', 'Rodentia'),
         ('Mus domesticus', 'Rodentia'),
         ('Cleithrionomys rutilus', 'Rodentia'),
         ('Microgale dobsoni', 'Afrosoricida'),
         ('Microgale talazaci', 'Afrosoricida'),
         ('Lyacon pictus', 'Carnivora'),
         ('Arctocephalus gazella', 'Carnivora'),
         ('Canis lupus', 'Carnivora'),
        ]

# Write a python script to populate a dictionary called taxa_dic derived from
# taxa so that it maps order names to sets of taxa and prints it to screen.
# 
# An example output is:
#  
# 'Chiroptera' : set(['Myotis lucifugus']) ... etc. 
# OR, 
# 'Chiroptera': {'Myotis  lucifugus'} ... etc

#### Your solution here #### 

taxa_dic = {}
for mammal, order in taxa:
    if order not in taxa_dic:
        taxa_dic[order] = set()
    taxa_dic[order].add(mammal)

print(taxa_dic)
    


# Now write a list comprehension that does the same (including the printing after the dictionary has been created)  
 
#### Your solution here #### 
print(taxa_dic := {order: {mammal for mammal, o in taxa if o == order} for _, order in taxa})


**********

Output (first 500 chars):

**********
{'Chiroptera': {'Myotis lucifugus'}, 'Rodentia': {'Peromyscus crinitus', 'Mus domesticus', 'Gerbillus henleyi', 'Cleithrionomys rutilus'}, 'Afrosoricida': {'Microgale dobsoni', 'Microgale talazaci'}, 'Carnivora': {'Canis lupus', 'Lyacon pictus', 'Arctocephalus gazella'}}
{'Chiroptera': {'Myotis lucifugus'}, 'Rodentia': {'Peromyscus crinitus', 'Mus domesticus', 'Gerbillus henleyi', 'Cleithrionomys rutilus'}, 'Afrosoricida': {'Microgale dobsoni', 'Microgale talazaci'}, 'Carnivora': {'Canis lupus',
**********
No errors.
======================================================================
Script: using_name.py

Contents:

**********
#!/usr/bin/env python3
# Filename: using_name.py

if __name__ == '__main__':
    print('This program is run autonomously')
else:
    print('I am being imported from another script/program/module')

print("This module's name is: " + __name__)
**********

Output (first 500 chars):

**********
This program is run autonomously
This module's name is: __main__

**********
No errors.
======================================================================
Script: basic_io3.py

Contents:

**********
## Storing objects and dumping into new files ##

my_dict = {"a key" : 10, "another key" : 11}

import pickle

f = open('../sandbox/testp.p', 'wb') #The b is for accepting binary files
pickle.dump(my_dict, f)
f.close()

f = open('../sandbox/testp.p', 'rb')
another_dict = pickle.load(f)
f.close()

print(another_dict)


**********

Output (first 500 chars):

**********

**********
Errors:
**********
Traceback (most recent call last):
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2025-26/Coursework/StudentRepos/EkadhRanganathan_/week2/code/basic_io3.py", line 7, in <module>
    f = open('../sandbox/testp.p', 'wb') #The b is for accepting binary files
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: '../sandbox/testp.p'

**********
======================================================================
Script: myexamplescript.py

Contents:

**********
def foo(x):
    x *= x
    print(x)
    return x

foo(2)
**********

Output (first 500 chars):

**********
4

**********
No errors.
======================================================================
Script: basic_io1.py

Contents:

**********
## Opening a file to read/edit ##
f = open('../sandbox/test.txt', 'r')

for line in f:
    print(line)

f.close()


## Another example of opening and printing ##
f = open('../sandbox/test.txt', 'r')
for line in f:
    if len(line.strip()) > 0:
        print(line)

f.close()
**********

Output (first 500 chars):

**********

**********
Errors:
**********
Traceback (most recent call last):
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2025-26/Coursework/StudentRepos/EkadhRanganathan_/week2/code/basic_io1.py", line 2, in <module>
    f = open('../sandbox/test.txt', 'r')
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: '../sandbox/test.txt'

**********
======================================================================
Script: cfexercises1.py

Contents:

**********
#!/usr/bin/env python3
""" Controlling the flows in exercise 1 """
__author__ = 'Ekadh (er925@ic.ac.uk)'
__version__ = '0.0.1'

import sys

def foo_1(x=1):
    """ Raising a number to the power of 0.5 """
    return x ** 0.5


def foo_2(x=10,y=11):
    """Finds the larger number out of 2 inputs"""
    if x > y:
        return x
    return y


def foo_3(x=7,y=8,z=2):
    """Puts three input numbers into ascending order"""
    if x > y:
        x, y = y, x
    if x > z:
        x, z = z, x
    if y > z:
        y, z = z, y
    return [x, y, z]


def foo_4(x=6):
    """Factorial calculator #1"""
    result = 1
    for i in range(1, x + 1):
        result = result * i
    return result


def foo_5(x=5):
    """Factorial calculator #2"""
    if x ==1:
        return 1
    return x * foo_5(x - 1) ## Recursive function to calculate factorials


def foo_6(x=5):
    """Factorial calculator #3"""
    facto = 1
    while x >= 1:
        facto = facto * x
        x = x-1
    return facto ## Much better factorial code


def main(argv):
    print(foo_1(12))
    print(foo_2(2, 6))
    print(foo_3(6, 1, 25))
    print(foo_4(4))
    print(foo_5(3))
    print(foo_6(6))
    return 0

if __name__ == "__main__":
    status = main(sys.argv) ## makes sure that the def(main) function is called from command line
    sys.exit(status)
**********

Output (first 500 chars):

**********
3.4641016151377544
6
[1, 6, 25]
24
6
720

**********
No errors.
======================================================================
Script: debugme.py

Contents:

**********
def buggyfunc(x):
    y = x
    for i in range(x):
        y = y-1
        z = x/y
    return z 

buggyfunc(20)
**********

Output (first 500 chars):

**********

**********
Errors:
**********
Traceback (most recent call last):
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2025-26/Coursework/StudentRepos/EkadhRanganathan_/week2/code/debugme.py", line 8, in <module>
    buggyfunc(20)
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2025-26/Coursework/StudentRepos/EkadhRanganathan_/week2/code/debugme.py", line 5, in buggyfunc
    z = x/y
        ~^~
ZeroDivisionError: division by zero

**********
======================================================================
Script: boilerplate.py

Contents:

**********
#!/usr/bin/env python3

__appname__ = '[boilerplate]'
__author__ = 'Ekadh (er925@ic.ac.uk)'
__version__ = '0.0.1'
__license__ = "License for this code/program"

""" This is the help page for this script
No one can help, it's just one line of code """

import sys ## connects program to the operating system

def main(argv):
    """ This function just prints a line """
    print('This is a boilerplate')
    return 0

if __name__ == "__main__":
    status = main(sys.argv) ## makes sure that the def(main) function is called from command line
    sys.exit("I am exiting now")
**********

Output (first 500 chars):

**********
This is a boilerplate

**********
Errors:
**********
I am exiting now

**********
======================================================================
Script: basic_io2.py

Contents:

**********
## Writing stuff into files, in this case lists ##
list_to_save = range(100)

f = open('../sandbox/testout.txt', 'w') #testout.txt didn't exist yet, but was made to export the list_to_save items
for i in list_to_save:
    f.write(str(i) + '\n')

f.close()
**********

Output (first 500 chars):

**********

**********
Errors:
**********
Traceback (most recent call last):
  File "/home/mhasoba/Documents/Teaching/IC_CMEE/2025-26/Coursework/StudentRepos/EkadhRanganathan_/week2/code/basic_io2.py", line 4, in <module>
    f = open('../sandbox/testout.txt', 'w') #testout.txt didn't exist yet, but was made to export the list_to_save items
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: '../sandbox/testout.txt'

**********
======================================================================
Script: control_flow.py

Contents:

**********
#!/usr/bin/env python3
""" Controlling flows in programs """
__author__ = 'Ekadh (er925@ic.ac.uk)'
__version__ = '0.0.1'

import sys ## connects program to the operating system

def even_or_odd(x=0):
    """Find whether a number x is even or odd"""
    if x % 2 == 0:
        return f"{x} is even!"
    return f"{x} is odd!"

def largest_divisor_five(x=120): ## I tried out my own version
    """Find the larger divisor of x among 2,3,4,5"""
    if x % 5 == 0:
        return f"{x} has a largest divisor of 5"
    elif x % 4 == 0:
        return f"{x} has a largest divisor of 4"
    elif x % 3 == 0:
        return f"{x} has a largest divisor of 3"
    elif x % 2 == 0:
        return f"{x} has a largest divisor of 2"
    return f"{x} is not divisible by any of the divisors"

def is_prime(x=70):
    """Finding out whether an integer is a prime number"""
    for i in range(2, x):
        if x % i == 0:
            print(f"{x} is NOT a prime!")
            return False
    print(f"{x} is indeed a prime!")
    return True

def find_all_primes(x=22):
    """Finding all the prime numbers between 2 and the number"""
    all_primes = []
    for i in range(2, x + 1):
        if is_prime(i):
           all_primes.append(i)
    print(f"There are {len(all_primes)} primes between 2 and {x}")
    return all_primes


def main(argv):
    print(even_or_odd(22))
    print(even_or_odd(33))
    print(largest_divisor_five(120))
    print(largest_divisor_five(121))
    print(is_prime(60))
    print(is_prime(59))
    print(find_all_primes(100))
    return 0

if __name__ == "__main__":
    status = main(sys.argv) ## makes sure that the def(main) function is called from command line
    sys.exit(status)
**********

Output (first 500 chars):

**********
22 is even!
33 is odd!
120 has a largest divisor of 5
121 is not divisible by any of the divisors
60 is NOT a prime!
False
59 is indeed a prime!
True
2 is indeed a prime!
3 is indeed a prime!
4 is NOT a prime!
5 is indeed a prime!
6 is NOT a prime!
7 is indeed a prime!
8 is NOT a prime!
9 is NOT a prime!
10 is NOT a prime!
11 is indeed a prime!
12 is NOT a prime!
13 is indeed a prime!
14 is NOT a prime!
15 is NOT a prime!
16 is NOT a prime!
17 is indeed a prime!
18 is NOT a prime!
19 is indeed a
**********
No errors.
======================================================================
Script: lc1.py

Contents:

**********
birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
         )

#(1) Write three separate list comprehensions that create three different
# lists containing the latin names, common names and mean body masses for
# each species in birds, respectively. 

latin_names = [row[0] for row in birds]
common_names = [row[1] for row in birds]
body_mass = [row[2] for row in birds]

print("Latin names: ", latin_names)
print("Common names: ", common_names)
print("Body mass: ", body_mass)

# (2) Now do the same using conventional loops (you can choose to do this 
# before 1 !). 

## It can all just be done in one for loop, so I've just included the one, but they can all be separate and acheive the same function as well.

latin_names = []
common_names = []
body_mass = []
for latin, common, mass in birds:
    latin_names.append(latin)
    common_names.append(common)
    body_mass.append(mass)


print("Latin names: ", latin_names)
print("Common names: ", common_names)
print("Body mass: ", body_mass)

# A nice example out out is:
# Step #1:
# Latin names:
# ['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
# ... etc.
 
**********

Output (first 500 chars):

**********
Latin names:  ['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
Common names:  ['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree swallow']
Body mass:  [18.7, 19, 19.5, 19.6, 20.2]
Latin names:  ['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
Common names:  ['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree swa
**********
No errors.
======================================================================
Script: sysargv.py

Contents:

**********
#!/usr/bin/env python3

import sys

print("This is the name of the script: ", sys.argv[0])
print("The number of arguments is: ", len(sys.argv))
print("The arguments are: ", str(sys.argv))


**********

Output (first 500 chars):

**********
This is the name of the script:  sysargv.py
The number of arguments is:  1
The arguments are:  ['sysargv.py']

**********
No errors.
======================================================================
Script: cf2exercises.py

Contents:

**********
## LOOP FUNCTIONS ##

def hello_1(x):
    for j in range(x):
        if j % 3 == 0:
            print("hello")
    print('')

hello_1(12)

def hello_2(x):
    for j in range(x):
        if j % 5 == 3:
            print('hello')
        elif j % 4 == 3:
            print('hello')
    print(' ')

hello_2(12)

def hello_3(x, y):
    for i in range(x, y):
        print("hello")
    print('')

hello_3(3, 17)

def hello_4(x):
    while x != 15:
        print("hello")
        x = x + 3
    print('')

hello_4(0)

def hello_5(x):
    while x < 100:
        if x == 31:
            for k in range(7):
                print('hello')
        elif x == 18:
            print('hello')
        x = x + 1
    print(' ')

hello_5(12)

## WHILE LOOP WITH BREAK ##

def hello_6(x, y):
    while x:
        print("hello_" + str(y))
        y += 1
        if y == 7:
            break
    print('')

hello_6(True, 1)

**********

Output (first 500 chars):

**********
hello
hello
hello
hello

hello
hello
hello
hello
 
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello

hello
hello
hello
hello
hello

hello
hello
hello
hello
hello
hello
hello
hello
 
hello_1
hello_2
hello_3
hello_4
hello_5
hello_6


**********
No errors.
======================================================================
Script: oaks_debugme.py

Contents:

**********
import csv
import sys

#Define function
def is_an_oak(name):
    """ Returns True if name is starts with 'quercus' """
    return 'querc' in name.lower()

def main(argv): 
    f = open('../data/TestOaksData.csv','r')
    g = open('../data/JustOaksData.csv','w')
    taxa = csv.reader(f)
    csvwrite = csv.writer(g)
    oaks = set()
    for row in taxa:
        print(row)
        print ("The genus is: ") 
        print(row[0] + '\n')
        if is_an_oak(row[0]):
            print('FOUND AN OAK!\n')
            csvwrite.writerow([row[0], row[1]])    

    return 0
    
if (__name__ == "__main__"):
    status = main(sys.argv)
**********

Output (first 500 chars):

**********
['Genus', ' species']
The genus is: 
Genus

['Quercus', ' robur']
The genus is: 
Quercus

FOUND AN OAK!

['Fraxinus', ' excelsior']
The genus is: 
Fraxinus

['Pinus', ' sylvestris']
The genus is: 
Pinus

['Quercus', ' cerris']
The genus is: 
Quercus

FOUND AN OAK!

['Quercus', ' petraea']
The genus is: 
Quercus

FOUND AN OAK!


**********
No errors.
======================================================================
Script: tuple.py

Contents:

**********
birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
        )

# Birds is a tuple of tuples of length three: latin name, common name, mass.
# write a (short) script to print these on a separate line or output block by
# species 
# 
# A nice example output is:
# 
# Latin name: Passerculus sandwichensis Common name: Savannah sparrow Mass: 18.7
# ... etc.

for latin, common, mass in birds:
    print("Latin name: ", latin, "Common name: ", common, "Mass: ", mass)






**********

Output (first 500 chars):

**********
Latin name:  Passerculus sandwichensis Common name:  Savannah sparrow Mass:  18.7
Latin name:  Delichon urbica Common name:  House martin Mass:  19
Latin name:  Junco phaeonotus Common name:  Yellow-eyed junco Mass:  19.5
Latin name:  Junco hyemalis Common name:  Dark-eyed junco Mass:  19.6
Latin name:  Tachycineata bicolor Common name:  Tree swallow Mass:  20.2

**********
No errors.
======================================================================
Script: test_control_flow.py

Contents:

**********
#!/usr/bin/env python3
""" Controlling flows in programs """
__author__ = 'Ekadh (er925@ic.ac.uk)'
__version__ = '0.0.1'

import sys ## connects program to the operating system
import doctest

def even_or_odd(x=0):
    """Find whether a number x is even or odd
    >>> even_or_odd(10)
    '10 is even!'

    >>> even_or_odd(5)
    '5 is odd!'

    in case of negative numbers, the positive is taken:
    >>> even_or_odd(-2)
    '-2 is even!'

    """

    if x % 2 == 0:
        return f"{x} is even!"
    return f"{x} is odd!"

def main(argv):
    print(even_or_odd(22))
    print(even_or_odd(33))
    return 0

if (__name__ == "__main__"):
    status = main(sys.argv) ## makes sure that the def(main) function is called from command line
    sys.exit(status) ## no need for doctest.testmod() if you run python3 -m doctest -v test_control_flow.py in terminal
    
**********

Output (first 500 chars):

**********
22 is even!
33 is odd!

**********
No errors.
======================================================================
Script: loops.py

Contents:

**********
# More loops

for i in range(5):
    print(i)

my_list = [0, 2, "geronimo", 3.0, True, False]
for k in my_list:
    print(k)

total = 0
summands = [0, 1, 11, 111, 1111]
for s in summands:
    total = total + s
    print(total)

# WHILE loop

z = 0
while z < 100:
    z = z + 1
    print(z)

for i in range(1, 6):
    print(i)
    if i == 3:
        break


**********

Output (first 500 chars):

**********
0
1
2
3
4
0
2
geronimo
3.0
True
False
0
1
12
123
1234
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
1
2
3

**********
No errors.
======================================================================
Script: basic_csv.py

Contents:

**********
import csv

## Transfers each row of the csv file into a temp list and prints each line ##
with open('../data/testcsv.csv', 'r') as f:
    csvread = csv.reader(f)
    temp = []
    for row in csvread:
        temp.append(tuple(row))
        print(row)
        print("The species is ", row[0])

with open('../data/testcsv.csv') as f:
    with open('../data/bodymass.csv', 'w') as g:
        csvread = csv.reader(f)
        csvwrite = csv.writer(g)
        for row in csvread:
            print(row)
            csvwrite.writerow([row[0], row[4]])


**********

Output (first 500 chars):

**********
['Species', 'Infraorder', 'Family', 'Distribution', 'Body mass male (Kg)']
The species is  Species
['Daubentonia_madagascariensis', 'Chiromyiformes ', 'Daubentoniidae', 'Madagascar', '2.7']
The species is  Daubentonia_madagascariensis
['Allocebus_trichotis', 'Lemuriformes', 'Cheirogaleidae', 'Madagascar', '0.1']
The species is  Allocebus_trichotis
['Avahi_laniger', 'Lemuriformes', 'Indridae', 'America', '1.03']
The species is  Avahi_laniger
['Avahi_occidentalis', 'Lemuriformes', 'Indridae', 'Mad
**********
No errors.
======================================================================
Script: align_seqs.py

Contents:

**********
#!/usr/bin/env python3
""" Aligns sequences in .fasta format """
__author__ = 'Ekadh (er925@ic.ac.uk)'
__version__ = '0.0.1'

import sys

def import_file_sequences():
    """ Import the sequence file. store sequences in a list and calculate lengths """
    seqs = []
    current_seq = ""
    with open('../data/testfasta.fasta', 'r') as f:
        for line in f:
            line = line.strip()
            if line.startswith(">"):
                if current_seq:
                    seqs.append(current_seq)
                    current_seq = ""
                continue
            current_seq = current_seq + line
        if current_seq:
            seqs.append(current_seq)

    seq2 = str(seqs[1])
    seq1 = str(seqs[0])
    l1 = len(seq1)
    l2 = len(seq2)
    if l1 >= l2:
        s1 = seq1
        s2 = seq2
    else:
        s1 = seq2
        s2 = seq1
        l1, l2 = l2, l1 # swap the two lengths
    return(s1, s2, l1, l2)

# A function that computes a score by returning the number of matches starting
# from arbitrary startpoint (chosen by user)
def calculate_score(s1, s2, l1, l2, startpoint):
    """ Starts from a startpoint and calculates matches """
    matched = "" # to hold string displaying alignements
    score = 0
    for i in range(l2):
        if (i + startpoint) < l1:
            if s1[i + startpoint] == s2[i]: # if the bases match
                matched = matched + "*"
                score = score + 1
            else:
                matched = matched + "-"
    print("." * startpoint + matched)           
    print("." * startpoint + s2)
    print(s1)
    print(score) 
    print(" ")
    return score

#import ipdb; ipdb.set_trace()

# Test the function with some example starting points:
# calculate_score(s1, s2, l1, l2, 0)
# calculate_score(s1, s2, l1, l2, 1)
# calculate_score(s1, s2, l1, l2, 5)

def main(argv):
    s1, s2, l1, l2 = import_file_sequences()
    
    my_best_align = None
    my_best_score = -1

    for i in range(l1): # Note that you just take the last alignment with the highest score
        """ Aligns sequences by adding dots to change startpoint and counting matches """
        z = calculate_score(s1, s2, l1, l2, i)
        if z > my_best_score:
            my_best_align = "." * i + s2 # think about what this is doing!
            my_best_score = z 

    with open("../results/align_output.txt", 'w') as out:
        """ Writes output to a text file, check results folder """
        out.write(f"Best alignment:\n{my_best_align}\n")
        out.write(f"{s1}\n")
        out.write(f"Best number of matches: {my_best_score}")
    print("Best score:", my_best_score)
    return 0

if __name__ == "__main__":
    status = main(sys.argv)
    sys.exit(status)

**********

Output (first 500 chars):

**********
*---*---*-----------------------
ATGCATGCATGCATGCATGCATGCATGCATGC
AAAAAAAAAAATGCATGCATGCATGCATGCATGCATGCATGCATGCAAAAAAAA
3
 
.*---*---*-----------------------
.ATGCATGCATGCATGCATGCATGCATGCATGC
AAAAAAAAAAATGCATGCATGCATGCATGCATGCATGCATGCATGCAAAAAAAA
3
 
..*---*---************************
..ATGCATGCATGCATGCATGCATGCATGCATGC
AAAAAAAAAAATGCATGCATGCATGCATGCATGCATGCATGCATGCAAAAAAAA
26
 
...*---*---------------------------
...ATGCATGCATGCATGCATGCATGCATGCATGC
AAAAAAAAAAATGCATGCATGCATGCATGCATGCATGCATGCATGC
**********
No errors.

======================================================================
FEEDBACK SUMMARY
======================================================================

Scripts tested: 22
Scripts successful: 17
Scripts with errors: 5
Warnings/Notes: 1

IMPORTANT DEBUGGING GUIDANCE:
------------------------------

Please review all warnings and errors, and your directory structure based on the above log.

Ask yourself: Why did I not get these warnings or errors on my machine when I tested my code?
Common reasons for environment differences:

• File paths: Your local machine may have different directory structures
• Dependencies: Missing packages or different versions
• File permissions: Scripts may not be executable on the testing server
• Case sensitivity: Linux systems are case-sensitive (your laptop may not be)
• Working directory: Scripts may assume they run from a specific location
• Input files: Required data files may be missing or in wrong locations

Debugging steps:
1. Test your code in a clean environment (fresh directory)
2. Check all file paths are relative and correct
3. Verify all required files are present and properly named
4. Test on a case-sensitive system if possible
5. Run your scripts from different directories to check robustness

Fix these issues and test again. Good debugging skills are essential for scientific computing!

